package purpleair

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
)

// Global variables for retaining the API access keys.
// These are set via the SetAPIKey.
var (
	apiReadKey  string
	apiWriteKey string
)

type KeyType string  // maps the response from PurpleAir when checking the validity and permissions
type SensorIndex int // uniquely identifies a sensor within the PurpleAir service
type SensorID string // unique identifier of a sensor found on its label
type GroupID int     // unique identifier of a collection of sensors within the PurpleAir service
type MemberID int    // unique identifier of a sensor within a specific group defined in the PurpleAir service
type Location int    // enables typechecking on defined location values

type Group struct {
	ID         GroupID `json:"id"`
	Name       string  `json:"name"`
	CreatedUTC int     `json:"created"`
}

type Member struct {
	ID         MemberID    `json:"id"`
	Index      SensorIndex `json:"sensor_index"`
	CreatedUTC int         `json:"created"`
}

// Private sensors must specify the owner's email and location in order to be accessed.
// Repeated failures to provide correct values for a private sensor may result in access key suspension.
type PrivateInfo struct {
	Email string
	Loc   Location
}

// GroupMember provides an abstract interface for referring to a sensor either by the SensorIndex,
// which is the reference generated by the PurpleAir service, or the SensorID, which is the
// reference available on the sensor device. Several calls provide flexibility on accepting
// either a SensorIndex or SensorID, so providing an abstraction helps reduce redundancy.
type GroupMember interface {
	CreateMember(groupID GroupID)
	DeleteMember(groupID GroupID)
}

// KeyTypes as returned from PurpleAir.
const (
	APIKeyUnknown       KeyType = "UNKNOWN"
	APIKeyRead          KeyType = "READ"
	APIKeyWrite         KeyType = "WRITE"
	APIKeyReadDisabled  KeyType = "READ_DISABLED"
	APIKeyWriteDisabled KeyType = "WRITE_DISABLED"
)

// Defined location values
const (
	Outside Location = 0
	Inside  Location = 1
)

// PurpleAir API paths
const (
	urlKeys    string = "https://api.purpleair.com/v1/keys"
	urlGroups  string = "https://api.purpleair.com/v1/groups"
	urlMembers string = "https://api.purpleair.com/v1/groups/%s/members"
)

// apiKeyHeader is the HTTP Request header used to pass in the access key value.
const apiKeyHeader string = "X-API-Key"

// SetAPIKey checks the validity and permissions of the provided access key string.
// If the key is valid, it will be retained by the module for further calls.
// Only one key for each permission (read or write) will be retained, and additional
// calls with other valid keys will result in replacement.
// The KeyType will be returned on success, or an error on failure.
func SetAPIKey(k string) (KeyType, error) {
	keyType, err := CheckAPIKey(k)
	if err != nil {
		log.Printf("Unable to CheckAPIKey: %v\n", err)
		return APIKeyUnknown, err
	}

	if keyType == APIKeyRead {
		log.Printf("Successfully set API read key\n")
		apiReadKey = k
	} else if keyType == APIKeyWrite {
		log.Printf("Successfully set API write key\n")
		apiWriteKey = k
	}

	return keyType, nil
}

// CheckAPIKey checks the validity and permissions of the provided access key string.
// It does *not* retain the key for further calls. Use SetAPIKey if retention is desired.
// The KeyType will be returned on success, or an error on failure.
func CheckAPIKey(k string) (KeyType, error) {
	type checkKeyType struct {
		V string  `json:"api_version"`
		T int     `json:"time_stamp"`
		K KeyType `json:"api_key_type"`
	}
	var keyTypeResp checkKeyType

	keyType := APIKeyUnknown

	req, err := http.NewRequest(http.MethodGet, urlKeys, nil)
	if err != nil {
		log.Printf("Unable to create HTTP request: %s\n", err)
		return keyType, err
	}
	req.Header.Add(apiKeyHeader, k)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Unable to execute HTTP request: %s\n", err)
		return keyType, err
	}
	defer resp.Body.Close()

	decoder := json.NewDecoder(resp.Body)
	err = decoder.Decode(&keyTypeResp)
	if err != nil {
		log.Printf("Unable to decode HTTP body: %s\n", err)
		return keyType, err
	}

	keyType = keyTypeResp.K
	log.Printf("Extracted key type: %s\n", keyType)

	return keyType, nil
}

// CreateGroup creates a persistent reference of a defined set of sensors on the PurpleAir service.
// Sensors can be added/removed using the membership APIs.
// This call requires a key with write permissions to be set prior to calling.
// A GroupID will be returned on success, or an error on failure.
func CreateGroup(g string) (GroupID, error) {
	reqBody := struct {
		GroupName string `json:"name"`
	}{GroupName: g}

	reqJSON, err := json.Marshal(reqBody)
	if err != nil {
		log.Printf("Unable to marshal json body: %s\n", err)
		return 0, err
	}

	req, err := setupCall(http.MethodPost, urlGroups, reqJSON)
	if err != nil {
		log.Printf("Unable to call API: %s\n", err)
		return 0, err
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Unable to execute HTTP request: %s\n", err)
		return 0, err
	}
	defer resp.Body.Close()

	groupResp := struct {
		G GroupID `json:"group_id"`
	}{}

	decoder := json.NewDecoder(resp.Body)
	err = decoder.Decode(&groupResp)
	if err != nil {
		log.Printf("Unable to decode HTTP body: %s\n", err)
		return 0, err
	}

	return groupResp.G, nil
}

// DeleteGroup deletes the persistent reference of a sensor group on the PurpleAir service.
// All sensor members must be removed prior to group deletion.
// This call requires a key with write permissions to be set prior to calling.
// An error will be returned on failure, or else nil
func DeleteGroup(g GroupID) error {
	url := fmt.Sprintf("%s/%d", urlGroups, g)
	req, err := setupCall(http.MethodDelete, url, nil)
	if err != nil {
		log.Printf("Unable to setup API call: %s\n", err)
		return err
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Unable to execute HTTP request: %s\n", err)
		return err
	}
	defer resp.Body.Close()

	return nil
}

// ListGroups provides all groups defined in the PurpleAir service associated with the access key.
// This call requires a key with read permissions to be set prior to calling.
// The list of groups will be returned on success, or else an error.
func ListGroups() ([]Group, error) {
	req, err := setupCall(http.MethodGet, urlGroups, nil)
	if err != nil {
		log.Printf("Unable to setup API call: %s\n", err)
		return nil, err
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Unable to execute HTTP request: %s\n", err)
		return nil, err
	}
	defer resp.Body.Close()

	groupResp := struct {
		Groups []Group `json:"groups"`
	}{}

	decoder := json.NewDecoder(resp.Body)
	err = decoder.Decode(&groupResp)
	if err != nil {
		log.Printf("Unable to decode HTTP body: %s\n", err)
		return nil, err
	}

	return groupResp.Groups, nil
}

// GroupDetails provides the list of member sensors defined for the specified group.
// This call requires a key with read permissions to be set prior to calling.
// The list of members will be returned on success, or else an error.
func GroupDetails(g GroupID) ([]Member, error) {
	url := fmt.Sprintf("%s/%d", urlGroups, g)
	req, err := setupCall(http.MethodGet, url, nil)
	if err != nil {
		log.Printf("Unable to setup API call: %s\n", err)
		return nil, err
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Unable to execute HTTP request: %s\n", err)
		return nil, err
	}
	defer resp.Body.Close()

	memberResp := struct {
		Members []Member `json:"members"`
	}{}

	decoder := json.NewDecoder(resp.Body)
	err = decoder.Decode(&memberResp)
	if err != nil {
		log.Printf("Unable to decode HTTP body: %s\n", err)
		return nil, err
	}

	return memberResp.Members, nil
}

func (s SensorIndex) CreateMember(g GroupID) error {
}

func (s SensorID) CreateMember(g GroupID) error {
}

func (s SensorIndex) DeleteMember(g GroupID) error {
}

func (s SensorID) DeleteMember(g GroupID) error {
}

// setupCall performs common tasks that are prerequisite before calling the API.
// It initializes a request object and adds the appropriate key (read or write) to the request.
// It returns a request ready for execution or an error.
func setupCall(method string, url string, reqBody []byte) (*http.Request, error) {
	req, err := http.NewRequest(method, url, bytes.NewBuffer(reqBody))
	if err != nil {
		return nil, err
	}

	switch method {
	case "GET":
		if len(apiReadKey) == 0 {
			return nil, errors.New("PurpleAir read key is not set")
		}
		req.Header.Add(apiKeyHeader, apiReadKey)
	case "POST":
		fallthrough
	case "DELETE":
		if len(apiWriteKey) == 0 {
			return nil, errors.New("PurpleAir write key is not set")
		}
		req.Header.Add(apiKeyHeader, apiWriteKey)
	}
	req.Header.Add("Content-Type", "application/json")

	return req, nil
}

/*

// Location of a sensor. Must be inside or outside.
type Location int

// SensorIndex is the PurpleAir internal reference to a sensor.
// SensorID is the value provided on the sensor's label.
// For sensors marked as private, the owner's email and proper location setting must also be specified.
type SensorID string

// Private sensor info used to identify/validate access to sensors which are marked as private.
// Used in conjunction with either a SensorID or SensorIndex value.
type PrivateSensorInfo struct {
	Email string
	Loc   Location
}

// Add the specified sensor to the group using the SensorIndex (PurpleAir's internal reference value).
// If the sensor is private, then the PrivateSensorInfo struct must be supplied.
// Access requires a valid write key. Be sure to SetAPIKey prior to calling.
// Returns the member ID assigned to the sensor upon success or an error if a problem was encountered.
// Example for public sensor:
//   AddSensorByIndex(gID, sIdx)
// Example for private sensor:
//   AddSensorByIndex(gID, sIdx, PrivateSensorInfo{ Email: "me@example.com", Loc: Outside })
func AddSensorByIndex(group GroupID, sensor SensorIndex, privInfo ...PrivateSensorInfo) (MemberID, error) {
	// private type for generating the json body of the request
	type reqBody struct {
		Sensor SensorIndex `json:"sensor_index"`
		Email  string      `json:"owner_email,omitempty"`
		Loc    Location    `json:"location_type,omitempty"`
	}

	var body reqBody
	switch len(privInfo) {
	case 0:
		body.Sensor = sensor
	case 1:
		body.Sensor = sensor
		body.Email = privInfo[0].Email
		body.Loc = privInfo[0].Loc
	default:
	}

	return nil, nil
}

// Add the specified sensor to the group using the SensorID (Available on the sensor's label).
// If the sensor is private, then the PrivateSensorInfo struct must be supplied.
// Access requires a valid write key. Be sure to SetAPIKey prior to calling.
// Returns the member ID assigned to the sensor upon success or an error if a problem was encountered.
func AddSensorByID(group GroupID, sensor SensorID, privInfo ...PrivateSensorInfo) (MemberID, error) {
	// private type for generating the json body of the request
	type reqBody struct {
		Sensor SensorID `json:"sensor_id"`
		Email  string   `json:"owner_email, omitempty"`
		Loc    Location `json:"location_type, omitempty"`
	}
	switch len(privInfo) {
	case 0:

	case 1:
	default:
	}

	return nil, nil
}

// Delete the specified member from the group.
// Access requires a valid write key. Be sure to SetAPIKey prior to calling.
// Returns an error if a problem was encountered.
func DeleteMember(group GroupID, member MemberID) error {
	return nil
}

type StationInfo struct {
	Name               string
	Icon               string
	Model              string
	Hardware           string
	Location           string
	Private            string
	Latitude           float64
	Longitude          float64
	Altitude           int
	PositionRating     int
	LedBrightness      int
	FirmwareVersion    string
	FirmwareUpgrade    string
	RSSI               float64
	Uptime             int
	Latency            int
	Memory             int
	LastSeen           int
	LastModified       int
	ChannelState       int
	ChannelFlags       int
	ChannelFlagsManual int
	ChannelFlagsAuto   int
	Confidence         int
	ConfidenceManual   int
	ConfidenceAuto     int
}

type EnvFields struct {
	Humidity      int
	Humidity_a    int
	Humidity_b    int
	Temperature   int
	Temperature_a int
	Temperature_b int
	Pressure      float64
	Pressure_a    float64
	Pressure_b    float64
}

type MiscFields struct {
	Voc         float64
	Voc_a       float64
	Voc_b       float64
	Ozone1      float64
	AnalogInput float64
}

type PartMass1_0Fields struct {
	PM1_0       float64
	PM1_0_a     float64
	PM1_0_b     float64
	PM1_0atm    float64
	PM1_0atm_a  float64
	PM1_0atm_b  float64
	PM1_0cf_1   float64
	PM1_0cf_1_a float64
	PM1_0cf_1_b float64
}

type PartMass2_5Fields struct {
	PM2_5alt    float64
	PM2_5alt_a  float64
	PM2_5alt_b  float64
	PM2_5       float64
	PM2_5_a     float64
	PM2_5_b     float64
	PM2_5atm    float64
	PM2_5atm_a  float64
	PM2_5atm_b  float64
	PM2_5cf_1   float64
	PM2_5cf_1_a float64
	PM2_5cf_1_b float64
}

type PartMass2_5AvgFields struct {
	PM2_5_10m   float64
	PM2_5_10m_a float64
	PM2_5_10m_b float64
	PM2_5_30m   float64
	PM2_5_30m_a float64
	PM2_5_30m_b float64
	PM2_5_60m   float64
	PM2_5_60m_a float64
	PM2_5_60m_b float64
	PM2_5_6h    float64
	PM2_5_6h_a  float64
	PM2_5_6h_b  float64
	PM2_5_24h   float64
	PM2_5_24h_a float64
	PM2_5_24h_b float64
	PM2_5_1w    float64
	PM2_5_1w_a  float64
	PM2_5_1w_b  float64
}

type PartMass10_0Fields struct {
	PM10_0       float64
	PM10_0_a     float64
	PM10_0_b     float64
	PM10_0atm    float64
	PM10_0atm_a  float64
	PM10_0atm_b  float64
	PM10_0cf_1   float64
	PM10_0cf_1_a float64
	PM10_0cf_1_b float64
}

type PartCountFields struct {
	PC0_3_um    int
	PC0_3_um_a  int
	PC0_3_um_b  int
	PC0_5_um    int
	PC0_5_um_a  int
	PC0_5_um_b  int
	PC1_0_um    int
	PC1_0_um_a  int
	PC1_0_um_b  int
	PC2_5_um    int
	PC2_5_um_a  int
	PC2_5_um_b  int
	PC5_0_um    int
	PC5_0_um_a  int
	PC5_0_um_b  int
	PC10_0_um   int
	PC10_0_um_a int
	PC10_0_um_b int
}

type ThingSpeakFields struct {
	PrimaryID_a    int
	PrimaryKey_a   string
	SecondaryID_a  int
	SecondaryKey_a string
	PrimaryID_b    int
	PrimaryKey_b   string
	SecondaryID_b  int
	SecondaryKey_b string
}

type SensorData struct {
	Station       StationInfo
	Environment   EnvFields
	Misc          MiscFields
	Pm1_0         PartMass1_0Fields
	Pm2_5         PartMass2_5Fields
	Pm2_5Avg      PartMass2_5AvgFields
	Pm10_0        PartMass10_0Fields
	ParticleCount PartCountFields
	ThingSpeak    ThingSpeakFields
}

type Point struct {
	Lat  float64
	Long float64
}

const (
	paSensorsReq string = "https://api.purpleair.com/v1/sensors"
)

func SensorDataByList(sensorIDs []SensorID) ([]SensorData, err) {
}

func SensorDataByArea(nwPoint, sePoint Point) ([]SensorData, err) {
}

func SensorDataByGroup(groupID GroupID) ([]SensorData, err) {
}

*/
