package purpleair

type KeyType string   // maps the response from PurpleAir when checking the validity and permissions
type SensorIndex int  // uniquely identifies a sensor within the PurpleAir service
type SensorID string  // unique identifier of a sensor found on its label
type GroupID int      // unique identifier of a collection of sensors within the PurpleAir service
type MemberID int     // unique identifier of a sensor within a specific group defined in the PurpleAir service
type ChannelState int // States for the sensor data channel availability
type ChannelFlag int  // Flags for the sensor data channels

type Group struct {
	ID         GroupID `json:"id"`
	Name       string  `json:"name"`
	CreatedUTC int     `json:"created"`
}

type Member struct {
	ID         MemberID    `json:"id"`
	Index      SensorIndex `json:"sensor_index"`
	CreatedUTC int         `json:"created"`
}

// Private sensors must specify the owner's email and location in order to be accessed.
// Repeated failures to provide correct values for a private sensor may result in access key suspension.
type PrivateInfo struct {
	Email string
	Loc   Location
}

// GroupMember provides an abstract interface for referring to a sensor either by the SensorIndex,
// which is the reference generated by the PurpleAir service, or the SensorID, which is the
// reference available on the sensor device. Several calls provide flexibility on accepting
// either a SensorIndex or SensorID, so providing an abstraction helps reduce redundancy.
type GroupMember interface {
	AddMember(g GroupID, pi ...PrivateInfo) (MemberID, error)
}

// SensorFields specify which fields are to be returned for single-sensor calls (MemberData, SensorData).
// If omitted, then all available fields will be returned.
type SensorFields struct {
	Fields string `json:"fields,omitempty"` // comma-delimited list of sensor data fields to return (return all if omitted)
}

// Collection of averaged statistics for the sensor channel
type SensorStats struct {
	PM_2_5        float64 `json:"pm2.5"`
	PM_2_5_10Min  float64 `json:"pm2.5_10minute"`
	PM_2_5_30Min  float64 `json:"pm2.5_30minute"`
	PM_2_5_60Min  float64 `json:"pm2.5_60minute"`
	PM_2_5_6Hour  float64 `json:"pm2.5_6hour"`
	PM_2_5_24Hour float64 `json:"pm2.5_24hour"`
	PM_2_5_1Week  float64 `json:"pm2.5_1week"`
	Timestamp     int     `json:"time_stamp"`
}

// SensorInfo is the data response to a sensor query.
// Not all fields may be available depending on the query fields specified or hardware capabilities.
type SensorInfo struct {
	Index           SensorIndex  `json:"sensor_index,omitempty"`
	Icon            int          `json"icon,omitempty"`
	Name            string       `json:"name,omitempty"`
	Private         Privacy      `json:"private,omitempty"`
	Loc             Location     `json:"location_type,omitempty"`
	Lat             float64      `json:"latitude,omitempty"`
	Lng             float64      `json:"longitude,omitempty"`
	Alt             int          `json:"altitude,omitempty"`
	Pos             int          `json:"position_rating,omitempty"`
	Model           string       `json:"model,omitempty"`
	Hardware        string       `json:"hardware,omitempty"`
	FirmVersion     string       `json:"firmware_version,omitempty"`
	FirmUpgrade     string       `json:"firmware_upgrade,omitempty"`
	RSSI            int          `json:"rssi,omitempty"`
	Uptime          int          `json:"uptime,omitempty"`
	Latency         int          `json:"pa_latency,omitempty"`
	Memory          int          `json:"memory,omitempty"`
	LED             int          `json:"led_brightness,omitempty"`
	ChnlState       ChannelState `json:"channel_state,omitempty"`
	ChnlFlags       ChannelFlag  `json:"channel_flags,omitempty"`
	ChnlManual      ChannelFlag  `json:"channel_flags_manual,omitempty"`
	ChnlAuto        ChannelFlag  `json:"channel_flags_auto,omitempty"`
	Cfdnc           int          `json:"confidence,omitempty"`
	CfdncManual     int          `json:"confidence_manual,omitempty"`
	CfdncAuto       int          `json:"confidence_auto,omitempty"`
	Mod             int          `json:"last_modifed,omitempty"`
	Created         int          `json:"date_created,omitempty"`
	PM_1_0          float64      `json:"pm1.0,omitempty"`
	PM_1_0_A        float64      `json:"pm1.0_a,omitempty"`
	PM_1_0_B        float64      `json:"pm1.0_b,omitempty"`
	PM_1_0_Atm      float64      `json:"pm1.0_atm,omitempty"`
	PM_1_0_Atm_A    float64      `json:"pm1.0_atm_a,omitempty"`
	PM_1_0_Atm_B    float64      `json:"pm1.0_atm_b,omitempty"`
	PM_1_0_Cf_1     float64      `json:"pm1.0_cf_1,omitempty"`
	PM_1_0_Cf_1_A   float64      `json:"pm1.0_cf_1_a,omitempty"`
	PM_1_0_Cf_1_B   float64      `json:"pm1.0_cf_1_b,omitempty"`
	PM_2_5_Alt      float64      `json:"pm2.5_alt,omitempty"`
	PM_2_5_Alt_A    float64      `json:"pm2.5_alt_a,omitempty"`
	PM_2_5_Alt_B    float64      `json:"pm2.5_alt_b,omitempty"`
	PM_2_5          float64      `json:"pm2.5,omitempty"`
	PM_2_5_A        float64      `json:"pm2.5_a,omitempty"`
	PM_2_5_B        float64      `json:"pm2.5_b,omitempty"`
	PM_2_5_Atm      float64      `json:"pm2.5_atm,omitempty"`
	PM_2_5_Atm_A    float64      `json:"pm2.5_atm_a,omitempty"`
	PM_2_5_Atm_B    float64      `json:"pm2.5_atm_b,omitempty"`
	PM_2_5_Cf_1     float64      `json:"pm2.5_cf_1,omitempty"`
	PM_2_5_Cf_1_A   float64      `json:"pm2.5_cf_1_a,omitempty"`
	PM_2_5_Cf_1_B   float64      `json:"pm2.5_cf_1_b,omitempty"`
	PM_2_5_10Min    float64      `json:"pm2.5_10minute,omitempty"`
	PM_2_5_10Min_A  float64      `json:"pm2.5_10minute_a,omitempty"`
	PM_2_5_10Min_B  float64      `json:"pm2.5_10minute_b,omitempty"`
	PM_2_5_30Min    float64      `json:"pm2.5_30minute,omitempty"`
	PM_2_5_30Min_A  float64      `json:"pm2.5_30minute_a,omitempty"`
	PM_2_5_30Min_B  float64      `json:"pm2.5_30minute_b,omitempty"`
	PM_2_5_60Min    float64      `json:"pm2.5_60minute,omitempty"`
	PM_2_5_60Min_A  float64      `json:"pm2.5_60minute_a,omitempty"`
	PM_2_5_60Min_B  float64      `json:"pm2.5_60minute_b,omitempty"`
	PM_2_5_6Hour    float64      `json:"pm2.5_6hour,omitempty"`
	PM_2_5_6Hour_A  float64      `json:"pm2.5_6hour_a,omitempty"`
	PM_2_5_6Hour_B  float64      `json:"pm2.5_6hour_b,omitempty"`
	PM_2_5_24Hour   float64      `json:"pm2.5_24hour,omitempty"`
	PM_2_5_24Hour_A float64      `json:"pm2.5_24hour_a,omitempty"`
	PM_2_5_24Hour_B float64      `json:"pm2.5_24hour_b,omitempty"`
	PM_2_5_1Week    float64      `json:"pm2.5_1week,omitempty"`
	PM_2_5_1Week_A  float64      `json:"pm2.5_1week_a,omitempty"`
	PM_2_5_1Week_B  float64      `json:"pm2.5_1week_b,omitempty"`
	PM_10_0         float64      `json:"pm10.0,omitempty"`
	PM_10_0_A       float64      `json:"pm10.0_a,omitempty"`
	PM_10_0_B       float64      `json:"pm10.0_b,omitempty"`
	PM_10_0_Atm     float64      `json:"pm10.0_atm,omitempty"`
	PM_10_0_Atm_A   float64      `json:"pm10.0_atm_a,omitempty"`
	PM_10_0_Atm_B   float64      `json:"pm10.0_atm_b,omitempty"`
	PM_10_0_Cf_1    float64      `json:"pm10.0_cf_1,omitempty"`
	PM_10_0_Cf_1_A  float64      `json:"pm10.0_cf_1_a,omitempty"`
	PM_10_0_Cf_1_B  float64      `json:"pm10.0_cf_1_b,omitempty"`
	PC_0_3um        int          `json:"0.3_um_count,omitempty"`
	PC_0_3um_A      int          `json:"0.3_um_count_a,omitempty"`
	PC_0_3um_B      int          `json:"0.3_um_count_b,omitempty"`
	PC_0_5um        int          `json:"0.5_um_count,omitempty"`
	PC_0_5um_A      int          `json:"0.5_um_count_a,omitempty"`
	PC_0_5um_B      int          `json:"0.5_um_count_b,omitempty"`
	PC_1_0um        int          `json:"1.0_um_count,omitempty"`
	PC_1_0um_A      int          `json:"1.0_um_count_a,omitempty"`
	PC_1_0um_B      int          `json:"1.0_um_count_b,omitempty"`
	PC_2_5um        int          `json:"2.5_um_count,omitempty"`
	PC_2_5um_A      int          `json:"2.5_um_count_a,omitempty"`
	PC_2_5um_B      int          `json:"2.5_um_count_b,omitempty"`
	PC_5_0um        int          `json:"5.0_um_count,omitempty"`
	PC_5_0um_A      int          `json:"5.0_um_count_a,omitempty"`
	PC_5_0um_B      int          `json:"5.0_um_count_b,omitempty"`
	PC_10_0um       int          `json:"10.0_um_count,omitempty"`
	PC_10_0um_A     int          `json:"10.0_um_count_a,omitempty"`
	PC_10_0um_B     int          `json:"10.0_um_count_b,omitempty"`
	Stats           SensorStats  `json:"stats,omitempty"`
	Stats_A         SensorStats  `json:"stats_a,omitempty"`
	Stats_B         SensorStats  `json:"stats_b,omitempty"`
	Humidity        int          `json:"humidity,omitempty"`
	Humidity_A      int          `json:"humidity_a,omitempty"`
	Humidity_B      int          `json:"humidity_b,omitempty"`
	Temp            int          `json:"temperature,omitempty"`
	Temp_A          int          `json:"temperature_a,omitempty"`
	Temp_B          int          `json:"temperature_b,omitempty"`
	Pressure        float64      `json:"pressure,omitempty"`
	Pressure_A      float64      `json:"pressure_a,omitempty"`
	Pressure_B      float64      `json:"pressure_b,omitempty"`
	VOC             float64      `json:"voc,omitempty"`
	VOC_A           float64      `json:"voc_a,omitempty"`
	VOC_B           float64      `json:"voc_b,omitempty"`
	Ozone           float64      `json:"ozone1,omitempty"`
	AnalogIn        float64      `json:"analog_input,omitempty"`
	PrimaryID_A     int          `json:"primary_id_a,omitempty"`
	PrimaryKey_A    string       `json:"primary_key_a,omitempty"`
	SecondaryID_A   int          `json:"secondary_id_a,omitempty"`
	SecondaryKey_A  string       `json:"secondary_key_a,omitempty"`
	PrimaryID_B     int          `json:"primary_id_b,omitempty"`
	PrimaryKey_B    string       `json:"primary_key_b,omitempty"`
	SecondaryID_B   int          `json:"secondary_id_b,omitempty"`
	SecondaryKey_B  string       `json:"secondary_key_b,omitempty"`
}

// Retype the sensor field labels to help enforce typing
type DataField string

// Retype the sensor query param to help enforce typing
type SensorParam string

// Map of provide sensor query params. In order to avoid misinterpretation
// of Go's default values, only explicit params pertinent for the query
// should be specified. (i.e. If a key isn't relevant for the query, then
// don't include the key in the map.)
type SensorParams map[SensorParam]interface{}
type SensorDataRow map[DataField]interface{}
type SensorDataSet map[int]SensorDataRow

// KeyTypes as returned from PurpleAir.
// A key can be checked with the CheckAPIKey function.
// Valid read & write keys are required for full API access.
const (
	KeyUnknown       KeyType = "UNKNOWN"
	KeyRead                  = "READ"
	KeyWrite                 = "WRITE"
	KeyReadDisabled          = "READ_DISABLED"
	KeyWriteDisabled         = "WRITE_DISABLED"
)

const (
	// keyHeader is the HTTP Request header used to pass in the access key value.
	// The value for the keyHeader requires the read key for GET requests and the
	// write key for POST or DELETE requests.
	keyHeader string = "X-API-Key"

	// Set the HTTP headers for the content type for JSON.
	contentTypeHeader string = "Content-Type"
	contentTypeJSON   string = "application/json"
)

// Sensor location values.
// Retyped int for better type-checking
type Location int

const (
	LocOutside Location = 0
	LocInside           = 1
)

// Sensor information privacy values.
// Retyped int for better type-checking
type Privacy int

const (
	SensorPublic  Privacy = 0
	SensorPrivate         = 1
)

// Defined channel states
const (
	PM_NONE ChannelState = 0 // no PM sensors detected
	PM_A    ChannelState = 1 // PM sensor only on channel A
	PM_B    ChannelState = 2 // PM sensor only on channel B
	PM_ALL  ChannelState = 3 // PM sensors on both channel A & B
)

// Defined channel flags
const (
	NORMAL         ChannelFlag = 0 // no sensors marked as downgraded
	DOWNGRADED_A   ChannelFlag = 1 // channel A sensors downgraded
	DOWNGRADED_B   ChannelFlag = 2 // channel B sensors downgraded
	DOWNGRADED_ALL ChannelFlag = 3 // both channel A & B sensors downgraded
)

// PurpleAir API paths
const (
	URLKEYS    string = "https://api.purpleair.com/v1/keys"
	URLGROUPS  string = "https://api.purpleair.com/v1/groups"
	URLMEMBERS string = "https://api.purpleair.com/v1/groups/%d/members"
	URLSENSORS string = "https://api.purpleair.com/v1/sensors"
)
